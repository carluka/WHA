Index: src/main/java/si/feri/um/wha/controllers/NarociloController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package si.feri.um.wha.controllers;\r\n\r\nimport org.springframework.http.ResponseEntity;\r\nimport si.feri.um.wha.dao.NarociloRepository;\r\nimport si.feri.um.wha.models.Artikel;\r\nimport si.feri.um.wha.models.Narocilo;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport si.feri.um.wha.models.Zaposleni;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@CrossOrigin\r\n@RequestMapping(\"/narocila\")\r\npublic class NarociloController {\r\n\r\n    @Autowired\r\n    private NarociloRepository narociloDao;\r\n\r\n    @GetMapping\r\n    public Iterable<Narocilo> vrniNarocilo(){\r\n        return narociloDao.findAll();\r\n    }\r\n\r\n    @GetMapping(\"/{ID_narocilo}\")\r\n    public Narocilo vrniDolocenoNarocilo(@PathVariable(name = \"ID_narocilo\") Long ID_narocilo){\r\n        return narociloDao.vrniDolocenoNarocilo(ID_narocilo);\r\n    }\r\n\r\n    @PostMapping\r\n    public Narocilo dodajNarocilo(@RequestBody Narocilo narocilo){\r\n        return narociloDao.save(narocilo);\r\n    }\r\n\r\n    @DeleteMapping(\"/izbrisi/{ID_narocilo}\")\r\n    public ResponseEntity<String> izbrisiNarocilo(@PathVariable(name = \"ID_narocilo\") Long ID_narocilo) throws Exception {\r\n        narociloDao.deleteById(ID_narocilo);\r\n        return ResponseEntity.ok(\"Uspesno izbrisano narocilo.\");\r\n    }\r\n\r\n    @PostMapping(\"/dodaj\")\r\n    public ResponseEntity<String> dodajNarocila(@RequestBody List<Narocilo> narocila) {\r\n        Iterable<Narocilo> savedNarocila = narociloDao.saveAll(narocila);\r\n        return ResponseEntity.ok(\"Uspesno dodana naročila.\");\r\n    }\r\n\r\n    @PutMapping(\"/posodobi/{ID_narocilo}\")\r\n    public ResponseEntity<String> posodobiNarocilo(@PathVariable(name = \"ID_narocilo\") Long ID_narocilo, @RequestBody Narocilo updatedNarocilo) {\r\n        Narocilo existingNarocilo = narociloDao.vrniDolocenoNarocilo(ID_narocilo);\r\n\r\n        if (existingNarocilo == null) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n\r\n        if (updatedNarocilo.getCenaSkupaj() != 0.0) {\r\n            existingNarocilo.setCenaSkupaj(updatedNarocilo.getCenaSkupaj());\r\n        }\r\n        if (updatedNarocilo.getSeznamKolicin() != null) {\r\n            existingNarocilo.setSeznamKolicin(updatedNarocilo.getSeznamKolicin());\r\n        }\r\n        if (updatedNarocilo.getZaposlen() != null) {\r\n            existingNarocilo.setZaposlen(updatedNarocilo.getZaposlen());\r\n        }\r\n        if (updatedNarocilo.getArtikli() != null) {\r\n            existingNarocilo.setArtikli(updatedNarocilo.getArtikli());\r\n        }\r\n        if (updatedNarocilo.getDatumVnosa() != null) {\r\n            existingNarocilo.setDatumVnosa(updatedNarocilo.getDatumVnosa());\r\n        }\r\n        if (updatedNarocilo.getRokPriprave() != null) {\r\n            existingNarocilo.setRokPriprave(updatedNarocilo.getRokPriprave());\r\n        }\r\n        if (updatedNarocilo.getCasPriprave() != null) {\r\n            existingNarocilo.setCasPriprave(updatedNarocilo.getCasPriprave());\r\n        }\r\n        if (updatedNarocilo.getStanjeNarocila() != null) {\r\n            existingNarocilo.setStanjeNarocila(updatedNarocilo.getStanjeNarocila());\r\n        }\r\n\r\n        narociloDao.save(existingNarocilo);\r\n\r\n        return ResponseEntity.ok(\"Naročilo uspešno posodobljeno.\");\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/si/feri/um/wha/controllers/NarociloController.java b/src/main/java/si/feri/um/wha/controllers/NarociloController.java
--- a/src/main/java/si/feri/um/wha/controllers/NarociloController.java	(revision 230ddc864af48cb52211c5e93cb3db985d55c990)
+++ b/src/main/java/si/feri/um/wha/controllers/NarociloController.java	(date 1705748194523)
@@ -83,4 +83,4 @@
         return ResponseEntity.ok("Naročilo uspešno posodobljeno.");
     }
 
-}
+}
\ No newline at end of file
Index: ../Frontend/frontend/src/pages/authentication/Narocila/dodajNarocilo.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button, Grid, Paper, IconButton, Typography } from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport MainCard from 'components/MainCard';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport api from '../../../services/api';\r\nimport { format, addDays } from 'date-fns';\r\n\r\n\r\nconst DodajNarocilo = () => {\r\n  // ===================================================================================== STRANKA =========================================================================\r\n    const [selectedStranka, setSelectedStranka] = useState(null); // Store the selected stranka object\r\n    const [field2Value, setField2Value] = useState('');\r\n    const [field3Value, setField3Value] = useState('');\r\n    const [field4Value, setField4Value] = useState('');\r\n    const [suggestions, setSuggestions] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      const fetchSuggestions = async () => {\r\n        try {\r\n          const response = await api.get('/stranka');\r\n          const data = response.data;\r\n  \r\n          setSuggestions(data);\r\n        } catch (error) {\r\n          console.error('Error fetching suggestions:', error);\r\n        }\r\n      };\r\n  \r\n      fetchSuggestions();\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      // Update Field 2, Field 3, and Field 4 when selectedStranka changes\r\n      if (selectedStranka) {\r\n        setField2Value(selectedStranka.email);\r\n        setField3Value(selectedStranka.telefon);\r\n        setField4Value(selectedStranka.kraj);\r\n      } else {\r\n        // Clear other fields when selectedStranka is null (field1 is cleared)\r\n        setField2Value('');\r\n        setField3Value('');\r\n        setField4Value('');\r\n      }\r\n    }, [selectedStranka]);\r\n  \r\n    // ===================================================================================== ARTIKLI =========================================================================\r\n    const [tableData, setTableData] = useState([\r\n      { col1: '', col2: '', col3: '', col4: '', col5: '', col6:'', selectedArtikel: null },\r\n    ]);\r\n    const [suggestionsArtikli, setArtikliSuggestions] = useState([]);\r\n  \r\n    const addRow = () => {\r\n      setTableData([...tableData, { col1: '', col2: '', col3: '', col4: '', col5: '', col6:'', selectedArtikel: null }]);\r\n    };\r\n  \r\n    const handleArtikelChange = async (event, newValue, index) => {\r\n      const updatedTableData = [...tableData];\r\n    \r\n      // Update selectedArtikel in the row\r\n      updatedTableData[index].selectedArtikel = newValue;\r\n      updatedTableData[index].col2 = newValue ? 1 : '';\r\n    \r\n      // Fetch additional data (dobavna cena and prodajna cena) for the selected artikel\r\n      if (newValue) {\r\n        try {\r\n          const response = await api.get(`/artikli/${newValue.id_artikel}`);\r\n          const { dobavnaCena, prodajnaCena, kolicina } = response.data;\r\n    \r\n          // Update dobavna cena and prodajna cena in the row\r\n          updatedTableData[index].col3 = dobavnaCena.toString();\r\n          updatedTableData[index].col4 = prodajnaCena.toString();\r\n          updatedTableData[index].col6 = kolicina.toString();\r\n    \r\n          // Calculate and update skupaj based on prodajna cena and kolicina\r\n          if (!isNaN(updatedTableData[index].col2)) {\r\n            updatedTableData[index].col5 = (parseFloat(updatedTableData[index].col4) * parseFloat(updatedTableData[index].col2)).toFixed(2);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching artikel details:', error);\r\n        }\r\n      } else {\r\n        // Clear dobavna cena, prodajna cena, and skupaj if no artikel is selected\r\n        updatedTableData[index].col3 = '';\r\n        updatedTableData[index].col4 = '';\r\n        updatedTableData[index].col5 = '';\r\n        updatedTableData[index].col6 = '';\r\n      }\r\n    \r\n      setTableData(updatedTableData);\r\n    };\r\n  \r\n    const handleKolicinaChange = (event, index) => {\r\n      const updatedTableData = [...tableData];\r\n  \r\n      // Update kolicina in the row\r\n      updatedTableData[index].col2 = event.target.value;\r\n  \r\n      // If prodajna cena is available, calculate and update skupaj\r\n      if (!isNaN(updatedTableData[index].col2) && !isNaN(updatedTableData[index].col4)) {\r\n        updatedTableData[index].col5 = (parseFloat(updatedTableData[index].col4) * parseFloat(updatedTableData[index].col2)).toFixed(2);\r\n      }\r\n  \r\n      setTableData(updatedTableData);\r\n    };\r\n  \r\n    useEffect(() => {\r\n      const fetchArtikli = async () => {\r\n        try {\r\n          const response = await api.get('/artikli');\r\n          const data = response.data;\r\n  \r\n          setArtikliSuggestions(data);\r\n        } catch (error) {\r\n          console.error('Error fetching suggestions:', error);\r\n        }\r\n      };\r\n  \r\n      fetchArtikli();\r\n    }, []);\r\n\r\n    // ===================================================================================== SPODNJI DEL =========================================================================\r\n    const [bottomLeft1, setBottomLeft1] = useState('');\r\n    const [bottomLeft2, setBottomLeft2] = useState('');\r\n    const [bottomLeft3, setBottomLeft3] = useState('');\r\n    const [skupajSum, setSkupajSum] = useState(0);\r\n\r\n    useEffect(() => {\r\n      const currentDate = new Date();\r\n      const formattedDate = currentDate.toISOString().split('T')[0]; // ISO format without time\r\n      setBottomLeft1(formattedDate);\r\n    }, []);\r\n  \r\n    // Effect to set \"rok priprave\" one day after Bottom Left 1\r\n    useEffect(() => {\r\n      if (bottomLeft1) {\r\n        const dateBottomLeft1 = new Date(bottomLeft1);\r\n        const dateBottomLeft2 = addDays(dateBottomLeft1, 1);\r\n        const formattedDate = format(dateBottomLeft2, 'yyyy-MM-dd');\r\n        setBottomLeft2(formattedDate);\r\n      }\r\n    }, [bottomLeft1]);\r\n\r\n    useEffect(() => {\r\n      const sum = tableData.reduce((acc, row) => acc + parseFloat(row.col5 || 0), 0);\r\n      setSkupajSum(sum);\r\n    }, [tableData]);\r\n\r\n    useEffect(() => {\r\n      setBottomLeft3(skupajSum.toFixed(2));\r\n    }, [skupajSum]);\r\n\r\n    // ===================================================================================== SHRANJEVANJE =========================================================================\r\n    const handleSave = async () => {\r\n      const invalidRow = tableData.find(row => parseFloat(row.col2) > parseFloat(row.col6));\r\n\r\n      if (invalidRow) {\r\n        // Show an alert if there is an invalid row\r\n        alert('The quantity in some rows is greater than \"na zalogi\". Please correct it before saving.');\r\n        return; // Prevent saving\r\n      }\r\n      if (!selectedStranka || !selectedStranka.naziv) {\r\n        alert('Naziv Stranke must not be empty.');\r\n        return; // Prevent saving\r\n      }\r\n    \r\n      // Check if \"Artikel\" is empty in any row\r\n      const emptyArtikel = tableData.find(row => !row.selectedArtikel);\r\n    \r\n      if (emptyArtikel) {\r\n        alert('Artikel must not be empty in some rows. Please select an Artikel for each row.');\r\n        return; // Prevent saving\r\n      }\r\n      // Gather and structure the data\r\n      const dataToSave = {\r\n        casPriprave: \"0000-01-01T00:00:00\",\r\n        cenaSkupaj: bottomLeft3,\r\n        datumVnosa: new Date().toISOString(),\r\n        rokPriprave: bottomLeft2,\r\n        seznamKolicin: tableData.map(row => row.col2),\r\n        stanjeNarocila: \"TODO\",\r\n        stranka: selectedStranka,\r\n        artikli: tableData.map(row => row.selectedArtikel.id_artikel),\r\n        zaposlen: {\r\n          \"ime\": \"Luka\",\r\n          \"priimek\": \"Car\",\r\n          \"telefon\": \"4123'041292\",\r\n          \"placa\": 1.0,\r\n          \"email\": null,\r\n          \"username\": \"0\",\r\n          \"password\": null,\r\n          \"enabled\": false,\r\n          \"tokenExpired\": false,\r\n          \"roles\": [],\r\n          \"tip_zaposlenega\": \"VODJA_PODJETJA\",\r\n          \"id_zaposleni\": 1\r\n      }\r\n      };\r\n  \r\n      console.log(dataToSave)\r\n      api.post(`/narocila`, dataToSave)\r\n      .then((result) => {\r\n        console.log(result.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('There was an error creating new narocilo!', error);\r\n      });\r\n    };\r\n\r\n    \r\n    const handleDownloadPDF = async () => {\r\n      try {\r\n        // Gather all the data needed for the PDF on the client side\r\n        const clientData = {\r\n          selectedStranka,\r\n          tableData,\r\n          bottomLeft1,\r\n          bottomLeft2,\r\n          bottomLeft3,\r\n        };\r\n\r\n        console.log(clientData)\r\n    \r\n        // Send a POST request to generate the PDF with client data\r\n        const response = await api.post('/generate-pdf', clientData, { responseType: 'arraybuffer' });\r\n    \r\n        // Create a Blob from the response data\r\n        const blob = new Blob([response.data], { type: 'application/pdf' });\r\n    \r\n        // Create a download link and trigger the download\r\n        const link = document.createElement('a');\r\n        link.href = window.URL.createObjectURL(blob);\r\n        link.download = 'generated-pdf.pdf';\r\n        link.click();\r\n      } catch (error) {\r\n        console.error('Error downloading PDF:', error);\r\n      }\r\n    };\r\n    \r\n\r\n  \r\n    return (\r\n      <MainCard>\r\n        <div style={{ marginBottom: '20px' }}>\r\n          {/* 4 Text Fields on Top */}\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={3}>\r\n              <Autocomplete\r\n                value={selectedStranka}\r\n                onChange={(event, newValue) => setSelectedStranka(newValue)}\r\n                options={suggestions}\r\n                getOptionLabel={(option) => option.naziv}\r\n                renderInput={(params) => <TextField {...params} label=\"Naziv Stranke\" fullWidth />}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <TextField label=\"Email\" value={field2Value} fullWidth />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <TextField label=\"Telefon\" value={field3Value} fullWidth />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <TextField label=\"Kraj\" value={field4Value} fullWidth />\r\n            </Grid>\r\n        </Grid>\r\n\r\n        {/* Main Table-Like Div */}\r\n        <Paper style={{ padding: '20px', marginTop: '20px' }}>\r\n          {/* Table Header */}\r\n          <Grid container spacing={2} style={{ marginBottom: '10px' }}>\r\n            <Grid item xs={2}>\r\n              <Typography>Artikel</Typography>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Typography>Količina</Typography>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Typography>Na zalogi</Typography>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <Typography>Dobavna Cena</Typography>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <Typography>Prodajna Cena</Typography>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <Typography>Skupaj</Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* Table Rows */}\r\n          {tableData.map((row, index) => (\r\n            <Grid container spacing={2} key={index} style={{ marginBottom: '10px' }}>\r\n              <Grid item xs={2}>\r\n                <Autocomplete\r\n                value={row.selectedArtikel}\r\n                onChange={(event, newValue) => handleArtikelChange(event, newValue, index)}\r\n                options={suggestionsArtikli}\r\n                getOptionLabel={(option) => option.naziv}\r\n                renderInput={(params) => <TextField {...params} fullWidth />}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                <TextField\r\n                value={row.col2}\r\n                onChange={(event) => handleKolicinaChange(event, index)}\r\n                fullWidth\r\n               />\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                <TextField value={row.col6} fullWidth />\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                <TextField value={row.col3} fullWidth />\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                <TextField value={row.col4} fullWidth />\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                <TextField value={row.col5} fullWidth />\r\n              </Grid>\r\n            </Grid>\r\n          ))}\r\n\r\n          {/* Plus Sign to Add Another Row */}\r\n          <IconButton onClick={addRow} color=\"primary\">\r\n            <AddIcon />\r\n          </IconButton>\r\n        </Paper>\r\n\r\n        {/* Bottom Left Corner Fields */}\r\n        <Grid container spacing={2} style={{ marginTop: '20px' }}>\r\n        <Grid item xs={4}>\r\n            <TextField label=\"Datum vnosa\" value={bottomLeft1} fullWidth disabled />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              label=\"Rok priprave\"\r\n              type=\"datetime-local\"\r\n              value={bottomLeft2}\r\n              onChange={(e) => setBottomLeft2(e.target.value)}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField label=\"Cena skupaj:\" value={bottomLeft3} fullWidth disabled />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Bottom Right Corner Buttons */}\r\n        <Grid container spacing={2}  style={{ marginTop: '20px', justifyContent: 'flex-end' }}>\r\n          <Grid item xs={12} style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n              <Button variant=\"contained\" color=\"secondary\" onClick={handleDownloadPDF}>\r\n                Download PDF\r\n              </Button>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={handleSave} style={{ marginLeft: '10px' }}>\r\n                Save\r\n              </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default DodajNarocilo;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Frontend/frontend/src/pages/authentication/Narocila/dodajNarocilo.js b/../Frontend/frontend/src/pages/authentication/Narocila/dodajNarocilo.js
--- a/../Frontend/frontend/src/pages/authentication/Narocila/dodajNarocilo.js	(revision 230ddc864af48cb52211c5e93cb3db985d55c990)
+++ b/../Frontend/frontend/src/pages/authentication/Narocila/dodajNarocilo.js	(date 1705748033147)
@@ -5,8 +5,8 @@
 import Autocomplete from '@mui/material/Autocomplete';
 import api from '../../../services/api';
 import { format, addDays } from 'date-fns';
-
-
+ 
+ 
 const DodajNarocilo = () => {
   // ===================================================================================== STRANKA =========================================================================
     const [selectedStranka, setSelectedStranka] = useState(null); // Store the selected stranka object
@@ -14,22 +14,22 @@
     const [field3Value, setField3Value] = useState('');
     const [field4Value, setField4Value] = useState('');
     const [suggestions, setSuggestions] = useState([]);
-  
+ 
     useEffect(() => {
       const fetchSuggestions = async () => {
         try {
           const response = await api.get('/stranka');
           const data = response.data;
-  
+ 
           setSuggestions(data);
         } catch (error) {
           console.error('Error fetching suggestions:', error);
         }
       };
-  
+ 
       fetchSuggestions();
     }, []);
-  
+ 
     useEffect(() => {
       // Update Field 2, Field 3, and Field 4 when selectedStranka changes
       if (selectedStranka) {
@@ -43,35 +43,35 @@
         setField4Value('');
       }
     }, [selectedStranka]);
-  
+ 
     // ===================================================================================== ARTIKLI =========================================================================
     const [tableData, setTableData] = useState([
       { col1: '', col2: '', col3: '', col4: '', col5: '', col6:'', selectedArtikel: null },
     ]);
     const [suggestionsArtikli, setArtikliSuggestions] = useState([]);
-  
+ 
     const addRow = () => {
       setTableData([...tableData, { col1: '', col2: '', col3: '', col4: '', col5: '', col6:'', selectedArtikel: null }]);
     };
-  
+ 
     const handleArtikelChange = async (event, newValue, index) => {
       const updatedTableData = [...tableData];
-    
+   
       // Update selectedArtikel in the row
       updatedTableData[index].selectedArtikel = newValue;
       updatedTableData[index].col2 = newValue ? 1 : '';
-    
+   
       // Fetch additional data (dobavna cena and prodajna cena) for the selected artikel
       if (newValue) {
         try {
           const response = await api.get(`/artikli/${newValue.id_artikel}`);
           const { dobavnaCena, prodajnaCena, kolicina } = response.data;
-    
+   
           // Update dobavna cena and prodajna cena in the row
           updatedTableData[index].col3 = dobavnaCena.toString();
           updatedTableData[index].col4 = prodajnaCena.toString();
           updatedTableData[index].col6 = kolicina.toString();
-    
+   
           // Calculate and update skupaj based on prodajna cena and kolicina
           if (!isNaN(updatedTableData[index].col2)) {
             updatedTableData[index].col5 = (parseFloat(updatedTableData[index].col4) * parseFloat(updatedTableData[index].col2)).toFixed(2);
@@ -86,51 +86,51 @@
         updatedTableData[index].col5 = '';
         updatedTableData[index].col6 = '';
       }
-    
+   
       setTableData(updatedTableData);
     };
-  
+ 
     const handleKolicinaChange = (event, index) => {
       const updatedTableData = [...tableData];
-  
+ 
       // Update kolicina in the row
       updatedTableData[index].col2 = event.target.value;
-  
+ 
       // If prodajna cena is available, calculate and update skupaj
       if (!isNaN(updatedTableData[index].col2) && !isNaN(updatedTableData[index].col4)) {
         updatedTableData[index].col5 = (parseFloat(updatedTableData[index].col4) * parseFloat(updatedTableData[index].col2)).toFixed(2);
       }
-  
+ 
       setTableData(updatedTableData);
     };
-  
+ 
     useEffect(() => {
       const fetchArtikli = async () => {
         try {
           const response = await api.get('/artikli');
           const data = response.data;
-  
+ 
           setArtikliSuggestions(data);
         } catch (error) {
           console.error('Error fetching suggestions:', error);
         }
       };
-  
+ 
       fetchArtikli();
     }, []);
-
+ 
     // ===================================================================================== SPODNJI DEL =========================================================================
     const [bottomLeft1, setBottomLeft1] = useState('');
     const [bottomLeft2, setBottomLeft2] = useState('');
     const [bottomLeft3, setBottomLeft3] = useState('');
     const [skupajSum, setSkupajSum] = useState(0);
-
+ 
     useEffect(() => {
       const currentDate = new Date();
       const formattedDate = currentDate.toISOString().split('T')[0]; // ISO format without time
       setBottomLeft1(formattedDate);
     }, []);
-  
+ 
     // Effect to set "rok priprave" one day after Bottom Left 1
     useEffect(() => {
       if (bottomLeft1) {
@@ -140,20 +140,20 @@
         setBottomLeft2(formattedDate);
       }
     }, [bottomLeft1]);
-
+ 
     useEffect(() => {
       const sum = tableData.reduce((acc, row) => acc + parseFloat(row.col5 || 0), 0);
       setSkupajSum(sum);
     }, [tableData]);
-
+ 
     useEffect(() => {
       setBottomLeft3(skupajSum.toFixed(2));
     }, [skupajSum]);
-
+ 
     // ===================================================================================== SHRANJEVANJE =========================================================================
     const handleSave = async () => {
       const invalidRow = tableData.find(row => parseFloat(row.col2) > parseFloat(row.col6));
-
+ 
       if (invalidRow) {
         // Show an alert if there is an invalid row
         alert('The quantity in some rows is greater than "na zalogi". Please correct it before saving.');
@@ -163,10 +163,10 @@
         alert('Naziv Stranke must not be empty.');
         return; // Prevent saving
       }
-    
+   
       // Check if "Artikel" is empty in any row
       const emptyArtikel = tableData.find(row => !row.selectedArtikel);
-    
+   
       if (emptyArtikel) {
         alert('Artikel must not be empty in some rows. Please select an Artikel for each row.');
         return; // Prevent saving
@@ -196,7 +196,7 @@
           "id_zaposleni": 1
       }
       };
-  
+ 
       console.log(dataToSave)
       api.post(`/narocila`, dataToSave)
       .then((result) => {
@@ -206,8 +206,8 @@
         console.error('There was an error creating new narocilo!', error);
       });
     };
-
-    
+ 
+   
     const handleDownloadPDF = async () => {
       try {
         // Gather all the data needed for the PDF on the client side
@@ -218,15 +218,15 @@
           bottomLeft2,
           bottomLeft3,
         };
-
+ 
         console.log(clientData)
-    
+   
         // Send a POST request to generate the PDF with client data
         const response = await api.post('/generate-pdf', clientData, { responseType: 'arraybuffer' });
-    
+   
         // Create a Blob from the response data
         const blob = new Blob([response.data], { type: 'application/pdf' });
-    
+   
         // Create a download link and trigger the download
         const link = document.createElement('a');
         link.href = window.URL.createObjectURL(blob);
@@ -236,9 +236,9 @@
         console.error('Error downloading PDF:', error);
       }
     };
-    
-
-  
+   
+ 
+ 
     return (
       <MainCard>
         <div style={{ marginBottom: '20px' }}>
@@ -263,7 +263,7 @@
               <TextField label="Kraj" value={field4Value} fullWidth />
             </Grid>
         </Grid>
-
+ 
         {/* Main Table-Like Div */}
         <Paper style={{ padding: '20px', marginTop: '20px' }}>
           {/* Table Header */}
@@ -287,7 +287,7 @@
               <Typography>Skupaj</Typography>
             </Grid>
           </Grid>
-
+ 
           {/* Table Rows */}
           {tableData.map((row, index) => (
             <Grid container spacing={2} key={index} style={{ marginBottom: '10px' }}>
@@ -321,13 +321,13 @@
               </Grid>
             </Grid>
           ))}
-
+ 
           {/* Plus Sign to Add Another Row */}
           <IconButton onClick={addRow} color="primary">
             <AddIcon />
           </IconButton>
         </Paper>
-
+ 
         {/* Bottom Left Corner Fields */}
         <Grid container spacing={2} style={{ marginTop: '20px' }}>
         <Grid item xs={4}>
@@ -346,7 +346,7 @@
             <TextField label="Cena skupaj:" value={bottomLeft3} fullWidth disabled />
           </Grid>
         </Grid>
-
+ 
         {/* Bottom Right Corner Buttons */}
         <Grid container spacing={2}  style={{ marginTop: '20px', justifyContent: 'flex-end' }}>
           <Grid item xs={12} style={{ display: 'flex', justifyContent: 'flex-end' }}>
@@ -362,5 +362,5 @@
     </MainCard>
   );
 };
-
+ 
 export default DodajNarocilo;
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"bd434cf2-e57e-4cbb-ae2e-d810ebb65cf4\" name=\"Changes\" comment=\"Enum stanje narocila\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_3__01__24__08_49__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_3__01__24__08_49__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHome\" value=\"Use Maven wrapper\" />\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n    <option name=\"importingSettings\">\r\n      <MavenImportingSettings>\r\n        <option name=\"workspaceImportEnabled\" value=\"true\" />\r\n      </MavenImportingSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2ZiZ8wCZQrmdu8TuCBzQt7U2bJe\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;/Users/rokfonovic/Desktop/Sola/2_LETNIK/RIS/Projekt/WHA/wha&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;org.jetbrains.plugins.github.ui.GithubSettingsConfigurable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"WHA\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"si.feri.um.wha.WhaApplication\" />\r\n      <module name=\"wha\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"bd434cf2-e57e-4cbb-ae2e-d810ebb65cf4\" name=\"Changes\" comment=\"\" />\r\n      <created>1702906705240</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1702906705240</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Znova ustvarjen git projekt\">\r\n      <created>1702906803638</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702906803638</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Enum stanje narocila\">\r\n      <created>1704285265764</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704285265764</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Enum stanje narocila\">\r\n      <created>1704285273302</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704285273302</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Znova ustvarjen git projekt\" />\r\n    <MESSAGE value=\"Enum stanje narocila\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Enum stanje narocila\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 230ddc864af48cb52211c5e93cb3db985d55c990)
+++ b/.idea/workspace.xml	(date 1705748209514)
@@ -4,9 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="bd434cf2-e57e-4cbb-ae2e-d810ebb65cf4" name="Changes" comment="Enum stanje narocila">
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_3__01__24__08_49__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_3__01__24__08_49__Changes_.xml" afterDir="false" />
+    <list default="true" id="bd434cf2-e57e-4cbb-ae2e-d810ebb65cf4" name="Changes" comment="Varovane poti pred prijavo">
+      <change beforePath="$PROJECT_DIR$/../Frontend/frontend/src/pages/authentication/Narocila/dodajNarocilo.js" beforeDir="false" afterPath="$PROJECT_DIR$/../Frontend/frontend/src/pages/authentication/Narocila/dodajNarocilo.js" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/si/feri/um/wha/controllers/NarociloController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/si/feri/um/wha/controllers/NarociloController.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
