Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>server.port=8180\r\nserver.servlet.context-path = /api/v1\r\nserver.error.include-message=always\r\n\r\nspring.datasource.url=jdbc:mysql://localhost:3306/wha\r\nspring.datasource.username=root\r\n\r\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\r\nspring.jpa.show-sql=true\r\nspring.jpa.generate-ddl=true
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 825aae9e549408329f391326a801627d3e191a85)
+++ b/src/main/resources/application.properties	(date 1706120946149)
@@ -7,4 +7,14 @@
 
 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
 spring.jpa.show-sql=true
-spring.jpa.generate-ddl=true
\ No newline at end of file
+spring.jpa.generate-ddl=true
+
+spring.mail.host=smtp.gmail.com
+spring.mail.port=587
+spring.mail.username=kodric558@gmail.com
+spring.mail.password=ysxnskhzhsjnoyid
+spring.mail.properties.mail.smtp.auth=true
+spring.mail.properties.mail.smtp.starttls.enable=true
+
+spring.servlet.multipart.max-file-size=10MB
+spring.servlet.multipart.max-request-size=10MB
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>3.2.0</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>si.feri.um</groupId>\r\n\t<artifactId>wha</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>wha</name>\r\n\t<description>WareHouse Assistant</description>\r\n\t<properties>\r\n\t\t<java.version>17</java.version>\r\n\t</properties>\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jdbc</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.mysql</groupId>\r\n\t\t\t<artifactId>mysql-connector-j</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.apache.pdfbox</groupId>\r\n\t\t\t<artifactId>pdfbox</artifactId>\r\n\t\t\t<version>3.0.1</version> <!-- Use the latest version available -->\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.google.zxing</groupId>\r\n\t\t\t<artifactId>core</artifactId>\r\n\t\t\t<version>3.5.2</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.google.zxing</groupId>\r\n\t\t\t<artifactId>javase</artifactId>\r\n\t\t\t<version>3.5.2</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.github.sarxos</groupId>\r\n\t\t\t<artifactId>webcam-capture</artifactId>\r\n\t\t\t<version>0.3.12</version>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 825aae9e549408329f391326a801627d3e191a85)
+++ b/pom.xml	(date 1706121672377)
@@ -60,6 +60,15 @@
 			<artifactId>webcam-capture</artifactId>
 			<version>0.3.12</version>
 		</dependency>
+		<dependency>
+			<groupId>com.sun.mail</groupId>
+			<artifactId>jakarta.mail</artifactId>
+			<version>2.0.1</version>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-mail</artifactId>
+		</dependency>
 	</dependencies>
 
 	<build>
Index: src/main/java/si/feri/um/wha/models/EmailService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/si/feri/um/wha/models/EmailService.java b/src/main/java/si/feri/um/wha/models/EmailService.java
new file mode 100644
--- /dev/null	(date 1706121686654)
+++ b/src/main/java/si/feri/um/wha/models/EmailService.java	(date 1706121686654)
@@ -0,0 +1,39 @@
+package si.feri.um.wha.models;
+
+import jakarta.mail.MessagingException; // Use jakarta.mail.MessagingException
+import jakarta.mail.internet.MimeMessage;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.core.io.ByteArrayResource;
+import org.springframework.mail.javamail.JavaMailSender;
+import org.springframework.mail.javamail.MimeMessageHelper;
+import org.springframework.stereotype.Service;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.io.IOException;
+
+@Service
+public class EmailService {
+
+    @Autowired
+    private JavaMailSender mailSender;
+
+    public void sendEmailWithAttachment(String to, String subject, String body, MultipartFile attachment) throws MessagingException, IOException {
+        MimeMessage message = mailSender.createMimeMessage();
+        MimeMessageHelper helper = new MimeMessageHelper(message, true);
+
+        helper.setTo(to);
+        helper.setSubject(subject);
+        helper.setText(body);
+
+        if (attachment != null && !attachment.isEmpty()) {
+            // Get the original filename and content from the MultipartFile
+            String originalFilename = attachment.getOriginalFilename();
+            byte[] attachmentBytes = attachment.getBytes();
+
+            // Add the attachment to the email
+            helper.addAttachment(originalFilename, new ByteArrayResource(attachmentBytes));
+        }
+
+        mailSender.send(message);
+    }
+}
Index: src/main/java/si/feri/um/wha/WhaApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package si.feri.um.wha;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class WhaApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(WhaApplication.class, args);\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/si/feri/um/wha/WhaApplication.java b/src/main/java/si/feri/um/wha/WhaApplication.java
--- a/src/main/java/si/feri/um/wha/WhaApplication.java	(revision 825aae9e549408329f391326a801627d3e191a85)
+++ b/src/main/java/si/feri/um/wha/WhaApplication.java	(date 1706118063532)
@@ -2,8 +2,10 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.web.servlet.ServletComponentScan;
 
 @SpringBootApplication
+@ServletComponentScan
 public class WhaApplication {
 
 	public static void main(String[] args) {
Index: src/main/java/si/feri/um/wha/controllers/EmailController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/si/feri/um/wha/controllers/EmailController.java b/src/main/java/si/feri/um/wha/controllers/EmailController.java
new file mode 100644
--- /dev/null	(date 1706121724411)
+++ b/src/main/java/si/feri/um/wha/controllers/EmailController.java	(date 1706121724411)
@@ -0,0 +1,33 @@
+package si.feri.um.wha.controllers;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
+import org.springframework.web.multipart.MultipartFile;
+import si.feri.um.wha.models.EmailService;
+
+import jakarta.mail.MessagingException; // Use jakarta.mail.MessagingException
+import java.io.IOException;
+
+@RestController
+@CrossOrigin
+@RequestMapping("/email")
+public class EmailController {
+
+    @Autowired
+    private EmailService emailService;
+
+    @PostMapping("/send")
+    public String sendEmail(
+            @RequestParam String to,
+            @RequestParam String subject,
+            @RequestParam String body,
+            @RequestPart(required = false) MultipartFile attachment
+    ) {
+        try {
+            emailService.sendEmailWithAttachment(to, subject, body, attachment); // Removed the cast
+            return "Email sent successfully";
+        } catch (MessagingException | IOException e) { // Combined into a single catch block
+            return "Error while sending email: " + e.getMessage();
+        }
+    }
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"bd434cf2-e57e-4cbb-ae2e-d810ebb65cf4\" name=\"Changes\" comment=\"Enum stanje narocila\">\r\n      <change beforePath=\"$PROJECT_DIR$/../Frontend/frontend/yarn.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../Frontend/frontend/yarn.lock\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$/..\" value=\"narocilaPrip\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHome\" value=\"Use Maven wrapper\" />\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n    <option name=\"importingSettings\">\r\n      <MavenImportingSettings>\r\n        <option name=\"workspaceImportEnabled\" value=\"true\" />\r\n      </MavenImportingSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2ZiZ8wCZQrmdu8TuCBzQt7U2bJe\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;/Users/rokfonovic/Desktop/Sola/2_LETNIK/RIS/Projekt/WHA/wha&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;org.jetbrains.plugins.github.ui.GithubSettingsConfigurable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"WHA\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"si.feri.um.wha.WhaApplication\" />\r\n      <module name=\"wha\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"bd434cf2-e57e-4cbb-ae2e-d810ebb65cf4\" name=\"Changes\" comment=\"\" />\r\n      <created>1702906705240</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1702906705240</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Znova ustvarjen git projekt\">\r\n      <created>1702906803638</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702906803638</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Enum stanje narocila\">\r\n      <created>1704285265764</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704285265764</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Enum stanje narocila\">\r\n      <created>1704285273302</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704285273302</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Znova ustvarjen git projekt\" />\r\n    <MESSAGE value=\"Enum stanje narocila\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Enum stanje narocila\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 825aae9e549408329f391326a801627d3e191a85)
+++ b/.idea/workspace.xml	(date 1706118852577)
@@ -5,7 +5,13 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="bd434cf2-e57e-4cbb-ae2e-d810ebb65cf4" name="Changes" comment="Enum stanje narocila">
-      <change beforePath="$PROJECT_DIR$/../Frontend/frontend/yarn.lock" beforeDir="false" afterPath="$PROJECT_DIR$/../Frontend/frontend/yarn.lock" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/si/feri/um/wha/controllers/EmailController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/si/feri/um/wha/models/EmailService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../Frontend/frontend/src/pages/authentication/Narocila/NarocilaTable.js" beforeDir="false" afterPath="$PROJECT_DIR$/../Frontend/frontend/src/pages/authentication/Narocila/NarocilaTable.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/si/feri/um/wha/WhaApplication.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/si/feri/um/wha/WhaApplication.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/application.properties" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
Index: ../Frontend/frontend/src/pages/authentication/Narocila/NarocilaTable.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import * as React from 'react';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport api from \"../../../services/api\";\r\nimport { useState, useEffect } from 'react';\r\nimport DownloadIcon from '@mui/icons-material/Download';\r\n\r\n \r\n \r\nexport default function NarocilaTable({ narocila, fetchNarocila, showDeleteAlert, handleEditClick }) {\r\n  console.log('narocila', narocila)\r\n  const [showHello, setShowHello] = useState({});\r\n  const [orderProducts, setOrderProducts] = useState({});\r\n\r\n   const izbrisiNarocilo = (narocilo_id) => {\r\n      api.delete(`/narocila/izbrisi/${narocilo_id}`)\r\n        .then((result) => {\r\n          // Refresh the article list after deletion\r\n          fetchNarocila();\r\n \r\n          showDeleteAlert();\r\n        })\r\n        .catch((error) => {\r\n          console.error('There was an error deleting the artikel!', error);\r\n        });\r\n    };\r\n  \r\n    // Function to handle the delete button click\r\n    const handleDeleteClick = (narocilo_id) => {\r\n      // Call the delete function only when the button is clicked\r\n      return () => izbrisiNarocilo(narocilo_id);\r\n    };\r\n  \r\n    const handlePlusClick = (narocilo_id) => {\r\n      if (showHello[narocilo_id]) {\r\n        // If the table is already visible, hide it\r\n        setShowHello((prevShowHello) => ({\r\n          ...prevShowHello,\r\n          [narocilo_id]: false,\r\n        }));\r\n      } else {\r\n        // Otherwise, fetch and show the table\r\n        api.get(`/narocila/${narocilo_id}`)\r\n          .then((result) => {\r\n            const numbers = result.data.artikli;\r\n            const fetchPromises = numbers.map((number) => api.get(`/artikli/${number}`));\r\n  \r\n            Promise.all(fetchPromises)\r\n              .then((productsData) => {\r\n                const fetchedProducts = productsData.map((productData) => productData.data);\r\n  \r\n                setOrderProducts((prevOrderProducts) => ({\r\n                  ...prevOrderProducts,\r\n                  [narocilo_id]: fetchedProducts,\r\n                }));\r\n  \r\n                setShowHello((prevShowHello) => ({\r\n                  ...prevShowHello,\r\n                  [narocilo_id]: true,\r\n                }));\r\n              })\r\n              .catch((error) => {\r\n                console.error('Error fetching products for the order!', error);\r\n              });\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error fetching order details!', error);\r\n          });\r\n      }\r\n    };\r\n\r\n    const handleDownloadPDF = (narocilo) => {\r\n      const numbers = narocilo.artikli;\r\n      const fetchPromises = numbers.map((number) => api.get(`/artikli/${number}`));\r\n  \r\n            Promise.all(fetchPromises)\r\n              .then(async (productsData) => {\r\n                const fetchedProducts = productsData.map((productData) => productData.data);\r\n                const imenaArtiklov = fetchedProducts.map((product) => product.naziv);\r\n                const prodajnaCene = fetchedProducts.map((product) => product.prodajnaCena);\r\n\r\n                const dataToSend = {\r\n                  stranka: narocilo.stranka,\r\n                  narociloID: narocilo.id_narocilo,\r\n                  datum: narocilo.datumVnosa,\r\n                  zaposleni: narocilo.zaposlen.ime + \" \" + narocilo.zaposlen.priimek,\r\n                  imenaArtiklov: imenaArtiklov,\r\n                  seznamProdajnihCen: prodajnaCene,\r\n                  seznamKolicin: narocilo.seznamKolicin\r\n                }\r\n                console.log(dataToSend)\r\n\r\n                const response = await api.post('/generate-pdf', dataToSend, { responseType: 'arraybuffer' });\r\n                const blob = new Blob([response.data], { type: 'application/pdf' });\r\n    \r\n                // Create a download link and trigger the download\r\n                const link = document.createElement('a');\r\n                link.href = window.URL.createObjectURL(blob);\r\n                link.download = 'generated-pdf.pdf';\r\n                link.click();\r\n              })\r\n              .catch((error) => {\r\n                console.error('Error fetching products for the order!', error);\r\n              });\r\n    };\r\n  \r\n    \r\n \r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Id</TableCell>\r\n            <TableCell align=\"right\">Datum Vnosa</TableCell>\r\n            <TableCell align=\"right\">Stranka</TableCell>\r\n            <TableCell align=\"right\">Zaposleni</TableCell>\r\n            <TableCell align=\"right\">Rok Priprave</TableCell>\r\n            <TableCell align=\"right\">Stanje</TableCell>\r\n            <TableCell align=\"right\">Skupaj Cena</TableCell>\r\n            <TableCell align=\"right\"> </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {narocila.map((narocilo) => (\r\n            <React.Fragment key={narocilo.id_artikel}>\r\n            <TableRow\r\n              key={narocilo.id_artikel}\r\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n            >\r\n              <TableCell component=\"th\" scope=\"row\" style={{ color: 'grey' }}>\r\n                {narocilo.id_narocilo}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{new Date(narocilo.datumVnosa).toLocaleString()}</TableCell>\r\n              <TableCell align=\"right\">{narocilo.stranka.naziv}</TableCell>\r\n              <TableCell align=\"right\">{narocilo.zaposlen.ime} {narocilo.zaposlen.priimek}</TableCell>\r\n              <TableCell align=\"right\">{new Date(narocilo.rokPriprave).toLocaleString()}</TableCell>\r\n              <TableCell align=\"right\">{narocilo.stanjeNarocila}</TableCell>\r\n              <TableCell align=\"right\">{narocilo.cenaSkupaj +\" €\"}</TableCell>\r\n              <TableCell align=\"right\">\r\n                  <IconButton aria-label=\"download\" size=\"large\" onClick={() => handleDownloadPDF(narocilo)} >\r\n                    <DownloadIcon/>\r\n                  </IconButton>\r\n                  <IconButton aria-label=\"edit\" size=\"large\" onClick={() => handleEditClick(narocilo.id_narocilo)} >\r\n                    <EditIcon />\r\n                  </IconButton>\r\n                  <IconButton\r\n                    aria-label=\"delete\"\r\n                    size=\"large\"\r\n                    onClick={handleDeleteClick(narocilo.id_narocilo)}\r\n                  >\r\n                    <DeleteIcon />\r\n                  </IconButton>\r\n                  <IconButton\r\n                    aria-label=\"add\"\r\n                    size=\"large\"\r\n                    onClick={() => handlePlusClick(narocilo.id_narocilo)}\r\n                  >\r\n                    <AddIcon />\r\n                  </IconButton>\r\n                </TableCell>\r\n                </TableRow>\r\n                {showHello[narocilo.id_narocilo] && (\r\n                <TableRow>\r\n                  <TableCell colSpan={5}>\r\n                    <Table size=\"small\" aria-label=\"product details\">\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell>ID</TableCell>\r\n                          <TableCell>Naziv</TableCell>\r\n                          <TableCell>Dobavna Cena</TableCell>\r\n                          <TableCell>Prodajna Cena</TableCell>\r\n                          <TableCell>Količina</TableCell>\r\n                          <TableCell>Skupaj</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {orderProducts[narocilo.id_narocilo] &&\r\n                          orderProducts[narocilo.id_narocilo].map((product, index) => (\r\n                            <TableRow key={product.id_artikel}>\r\n                              <TableCell>{product.id_artikel}</TableCell>\r\n                              <TableCell>{product.naziv}</TableCell>\r\n                              <TableCell>{product.dobavnaCena +\" €\"}</TableCell>\r\n                              <TableCell>{product.prodajnaCena +\" €\"}</TableCell>\r\n                              <TableCell>{narocilo.seznamKolicin[index]}</TableCell>\r\n                              <TableCell>{(product.prodajnaCena * narocilo.seznamKolicin[index]).toFixed(2)+\" €\"}</TableCell>\r\n                            </TableRow>\r\n                          ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </React.Fragment>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Frontend/frontend/src/pages/authentication/Narocila/NarocilaTable.js b/../Frontend/frontend/src/pages/authentication/Narocila/NarocilaTable.js
--- a/../Frontend/frontend/src/pages/authentication/Narocila/NarocilaTable.js	(revision 825aae9e549408329f391326a801627d3e191a85)
+++ b/../Frontend/frontend/src/pages/authentication/Narocila/NarocilaTable.js	(date 1706121979629)
@@ -1,120 +1,212 @@
-import * as React from 'react';
-import Table from '@mui/material/Table';
-import TableBody from '@mui/material/TableBody';
-import TableCell from '@mui/material/TableCell';
-import TableContainer from '@mui/material/TableContainer';
-import TableHead from '@mui/material/TableHead';
-import TableRow from '@mui/material/TableRow';
-import Paper from '@mui/material/Paper';
-import IconButton from '@mui/material/IconButton';
-import DeleteIcon from '@mui/icons-material/Delete';
-import EditIcon from '@mui/icons-material/Edit';
-import AddIcon from '@mui/icons-material/Add';
+import * as React from "react";
+import Table from "@mui/material/Table";
+import TableBody from "@mui/material/TableBody";
+import TableCell from "@mui/material/TableCell";
+import TableContainer from "@mui/material/TableContainer";
+import TableHead from "@mui/material/TableHead";
+import TableRow from "@mui/material/TableRow";
+import Paper from "@mui/material/Paper";
+import IconButton from "@mui/material/IconButton";
+import DeleteIcon from "@mui/icons-material/Delete";
+import EditIcon from "@mui/icons-material/Edit";
+import AddIcon from "@mui/icons-material/Add";
 import api from "../../../services/api";
-import { useState, useEffect } from 'react';
-import DownloadIcon from '@mui/icons-material/Download';
+import { useState, useEffect } from "react";
+import DownloadIcon from "@mui/icons-material/Download";
+import Dialog from "@mui/material/Dialog";
+import DialogTitle from "@mui/material/DialogTitle";
+import DialogContent from "@mui/material/DialogContent";
+import DialogActions from "@mui/material/DialogActions";
+import TextField from "@mui/material/TextField";
+import Button from "@mui/material/Button";
+import SendIcon from "@mui/icons-material/Send";
+import { useDropzone } from "react-dropzone";
 
- 
- 
-export default function NarocilaTable({ narocila, fetchNarocila, showDeleteAlert, handleEditClick }) {
-  console.log('narocila', narocila)
+export default function NarocilaTable({
+  narocila,
+  fetchNarocila,
+  showDeleteAlert,
+  handleEditClick,
+}) {
   const [showHello, setShowHello] = useState({});
   const [orderProducts, setOrderProducts] = useState({});
 
-   const izbrisiNarocilo = (narocilo_id) => {
-      api.delete(`/narocila/izbrisi/${narocilo_id}`)
-        .then((result) => {
-          // Refresh the article list after deletion
-          fetchNarocila();
- 
-          showDeleteAlert();
-        })
-        .catch((error) => {
-          console.error('There was an error deleting the artikel!', error);
-        });
-    };
-  
-    // Function to handle the delete button click
-    const handleDeleteClick = (narocilo_id) => {
-      // Call the delete function only when the button is clicked
-      return () => izbrisiNarocilo(narocilo_id);
-    };
-  
-    const handlePlusClick = (narocilo_id) => {
-      if (showHello[narocilo_id]) {
-        // If the table is already visible, hide it
-        setShowHello((prevShowHello) => ({
-          ...prevShowHello,
-          [narocilo_id]: false,
-        }));
-      } else {
-        // Otherwise, fetch and show the table
-        api.get(`/narocila/${narocilo_id}`)
-          .then((result) => {
-            const numbers = result.data.artikli;
-            const fetchPromises = numbers.map((number) => api.get(`/artikli/${number}`));
-  
-            Promise.all(fetchPromises)
-              .then((productsData) => {
-                const fetchedProducts = productsData.map((productData) => productData.data);
-  
-                setOrderProducts((prevOrderProducts) => ({
-                  ...prevOrderProducts,
-                  [narocilo_id]: fetchedProducts,
-                }));
-  
-                setShowHello((prevShowHello) => ({
-                  ...prevShowHello,
-                  [narocilo_id]: true,
-                }));
-              })
-              .catch((error) => {
-                console.error('Error fetching products for the order!', error);
-              });
-          })
-          .catch((error) => {
-            console.error('Error fetching order details!', error);
-          });
-      }
-    };
+  const izbrisiNarocilo = (narocilo_id) => {
+    api
+      .delete(`/narocila/izbrisi/${narocilo_id}`)
+      .then((result) => {
+        // Refresh the article list after deletion
+        fetchNarocila();
+
+        showDeleteAlert();
+      })
+      .catch((error) => {
+        console.error("There was an error deleting the artikel!", error);
+      });
+  };
+
+  // Function to handle the delete button click
+  const handleDeleteClick = (narocilo_id) => {
+    // Call the delete function only when the button is clicked
+    return () => izbrisiNarocilo(narocilo_id);
+  };
+
+  const handlePlusClick = (narocilo_id) => {
+    if (showHello[narocilo_id]) {
+      // If the table is already visible, hide it
+      setShowHello((prevShowHello) => ({
+        ...prevShowHello,
+        [narocilo_id]: false,
+      }));
+    } else {
+      // Otherwise, fetch and show the table
+      api
+        .get(`/narocila/${narocilo_id}`)
+        .then((result) => {
+          const numbers = result.data.artikli;
+          const fetchPromises = numbers.map((number) =>
+            api.get(`/artikli/${number}`)
+          );
+
+          Promise.all(fetchPromises)
+            .then((productsData) => {
+              const fetchedProducts = productsData.map(
+                (productData) => productData.data
+              );
+
+              setOrderProducts((prevOrderProducts) => ({
+                ...prevOrderProducts,
+                [narocilo_id]: fetchedProducts,
+              }));
+
+              setShowHello((prevShowHello) => ({
+                ...prevShowHello,
+                [narocilo_id]: true,
+              }));
+            })
+            .catch((error) => {
+              console.error("Error fetching products for the order!", error);
+            });
+        })
+        .catch((error) => {
+          console.error("Error fetching order details!", error);
+        });
+    }
+  };
 
-    const handleDownloadPDF = (narocilo) => {
-      const numbers = narocilo.artikli;
-      const fetchPromises = numbers.map((number) => api.get(`/artikli/${number}`));
-  
-            Promise.all(fetchPromises)
-              .then(async (productsData) => {
-                const fetchedProducts = productsData.map((productData) => productData.data);
-                const imenaArtiklov = fetchedProducts.map((product) => product.naziv);
-                const prodajnaCene = fetchedProducts.map((product) => product.prodajnaCena);
+  const handleDownloadPDF = (narocilo) => {
+    const numbers = narocilo.artikli;
+    const fetchPromises = numbers.map((number) =>
+      api.get(`/artikli/${number}`)
+    );
+
+    Promise.all(fetchPromises)
+      .then(async (productsData) => {
+        const fetchedProducts = productsData.map(
+          (productData) => productData.data
+        );
+        const imenaArtiklov = fetchedProducts.map((product) => product.naziv);
+        const prodajnaCene = fetchedProducts.map(
+          (product) => product.prodajnaCena
+        );
 
-                const dataToSend = {
-                  stranka: narocilo.stranka,
-                  narociloID: narocilo.id_narocilo,
-                  datum: narocilo.datumVnosa,
-                  zaposleni: narocilo.zaposlen.ime + " " + narocilo.zaposlen.priimek,
-                  imenaArtiklov: imenaArtiklov,
-                  seznamProdajnihCen: prodajnaCene,
-                  seznamKolicin: narocilo.seznamKolicin
-                }
-                console.log(dataToSend)
+        const dataToSend = {
+          stranka: narocilo.stranka,
+          narociloID: narocilo.id_narocilo,
+          datum: narocilo.datumVnosa,
+          zaposleni: narocilo.zaposlen.ime + " " + narocilo.zaposlen.priimek,
+          imenaArtiklov: imenaArtiklov,
+          seznamProdajnihCen: prodajnaCene,
+          seznamKolicin: narocilo.seznamKolicin,
+        };
+        console.log(dataToSend);
 
-                const response = await api.post('/generate-pdf', dataToSend, { responseType: 'arraybuffer' });
-                const blob = new Blob([response.data], { type: 'application/pdf' });
-    
-                // Create a download link and trigger the download
-                const link = document.createElement('a');
-                link.href = window.URL.createObjectURL(blob);
-                link.download = 'generated-pdf.pdf';
-                link.click();
-              })
-              .catch((error) => {
-                console.error('Error fetching products for the order!', error);
-              });
-    };
-  
-    
- 
+        const response = await api.post("/generate-pdf", dataToSend, {
+          responseType: "arraybuffer",
+        });
+        const blob = new Blob([response.data], { type: "application/pdf" });
+
+        // Create a download link and trigger the download
+        const link = document.createElement("a");
+        link.href = window.URL.createObjectURL(blob);
+        link.download = "generated-pdf.pdf";
+        link.click();
+      })
+      .catch((error) => {
+        console.error("Error fetching products for the order!", error);
+      });
+  };
+
+  // State for email modal visibility and form data
+  const [emailModalOpen, setEmailModalOpen] = useState(false);
+  const [emailFormData, setEmailFormData] = useState({
+    to: "",
+    subject: "",
+    body: "",
+    attachment: "",
+  });
+
+  // Function to handle opening the email modal
+  const handleOpenEmailModal = () => {
+    setEmailModalOpen(true);
+  };
+
+  // Function to handle email form change
+  const handleEmailFormChange = (e) => {
+    const { name, value } = e.target;
+    setEmailFormData((prevFormData) => ({
+      ...prevFormData,
+      [name]: value,
+    }));
+  };
+
+  // Function to handle email form submission
+  const handleEmailFormSubmit = async (e) => {
+    e.preventDefault();
+    const formData = new FormData();
+    formData.append("to", emailFormData.to);
+    formData.append("subject", emailFormData.subject);
+    formData.append("body", emailFormData.body);
+
+    if (emailFormData.attachment) {
+      formData.append("attachment", emailFormData.attachment);
+    }
+
+    try {
+      await api.post("/email/send", formData, {
+        headers: {
+          "Content-Type": "multipart/form-data",
+        },
+      });
+      // Handle success
+    } catch (error) {
+      // Handle error
+    }
+    setEmailModalOpen(false);
+    setEmailFormData({
+      to: "",
+      subject: "",
+      body: "",
+      attachment: "",
+    });
+  };
+
+  const { getRootProps, getInputProps, isDragActive } = useDropzone({
+    onDrop: (acceptedFiles) => {
+      // Handle the dropped files here
+      const file = acceptedFiles[0]; // Assuming you only allow one file
+      if (file) {
+        // Update the attachmentPath field with the file path or name
+        handleEmailFormChange({
+          target: {
+            name: "attachment",
+            value: file,
+          },
+        });
+      }
+    },
+  });
+
   return (
     <TableContainer component={Paper}>
       <Table sx={{ minWidth: 650 }} aria-label="simple table">
@@ -133,24 +225,142 @@
         <TableBody>
           {narocila.map((narocilo) => (
             <React.Fragment key={narocilo.id_artikel}>
-            <TableRow
-              key={narocilo.id_artikel}
-              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
-            >
-              <TableCell component="th" scope="row" style={{ color: 'grey' }}>
-                {narocilo.id_narocilo}
-              </TableCell>
-              <TableCell align="right">{new Date(narocilo.datumVnosa).toLocaleString()}</TableCell>
-              <TableCell align="right">{narocilo.stranka.naziv}</TableCell>
-              <TableCell align="right">{narocilo.zaposlen.ime} {narocilo.zaposlen.priimek}</TableCell>
-              <TableCell align="right">{new Date(narocilo.rokPriprave).toLocaleString()}</TableCell>
-              <TableCell align="right">{narocilo.stanjeNarocila}</TableCell>
-              <TableCell align="right">{narocilo.cenaSkupaj +" €"}</TableCell>
-              <TableCell align="right">
-                  <IconButton aria-label="download" size="large" onClick={() => handleDownloadPDF(narocilo)} >
-                    <DownloadIcon/>
+              <TableRow
+                key={narocilo.id_artikel}
+                sx={{ "&:last-child td, &:last-child th": { border: 0 } }}
+              >
+                <TableCell component="th" scope="row" style={{ color: "grey" }}>
+                  {narocilo.id_narocilo}
+                </TableCell>
+                <TableCell align="right">
+                  {new Date(narocilo.datumVnosa).toLocaleString()}
+                </TableCell>
+                <TableCell align="right">{narocilo.stranka.naziv}</TableCell>
+                <TableCell align="right">
+                  {narocilo.zaposlen.ime} {narocilo.zaposlen.priimek}
+                </TableCell>
+                <TableCell align="right">
+                  {new Date(narocilo.rokPriprave).toLocaleString()}
+                </TableCell>
+                <TableCell align="right">{narocilo.stanjeNarocila}</TableCell>
+                <TableCell align="right">
+                  {narocilo.cenaSkupaj + " €"}
+                </TableCell>
+                <TableCell align="right">
+                  <IconButton
+                    aria-label="email"
+                    size="large"
+                    onClick={handleOpenEmailModal}
+                  >
+                    <SendIcon />
+                  </IconButton>
+
+                  {/* Email Modal */}
+                  {emailModalOpen && (
+                    <Dialog
+                      open={emailModalOpen}
+                      onClose={() => {setEmailModalOpen(false);
+                        setEmailFormData({
+                           to: "",
+                           subject: "",
+                           body: "",
+                           attachment: "",
+                         });}}
+                      aria-labelledby="email-dialog-title"
+                      aria-describedby="email-dialog-description"
+
+                      BackdropProps={{
+                        style: {
+                          backgroundColor: 'rgba(255, 255, 255, 0.01 )',
+                          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.03)',
+                        },
+                     }}
+                    >
+                      <DialogTitle id="email-dialog-title">
+                        {"Send Email"}
+                      </DialogTitle>
+                      <DialogContent>
+                        <form onSubmit={handleEmailFormSubmit}>
+                          <TextField
+                            label="To"
+                            name="to"
+                            value={emailFormData.to}
+                            onChange={handleEmailFormChange}
+                            fullWidth
+                            margin="normal"
+                          />
+                          <TextField
+                            label="Subject"
+                            name="subject"
+                            value={emailFormData.subject}
+                            onChange={handleEmailFormChange}
+                            fullWidth
+                            margin="normal"
+                          />
+                          <TextField
+                            label="Body"
+                            name="body"
+                            value={emailFormData.body}
+                            onChange={handleEmailFormChange}
+                            multiline
+                            rows={4}
+                            fullWidth
+                            margin="normal"
+                          />
+                          <div
+                            {...getRootProps()}
+                            style={{
+                              border: "2px dashed #cccccc",
+                              borderRadius: "4px",
+                              padding: "20px",
+                              textAlign: "center",
+                              cursor: "pointer",
+                            }}
+                          >
+                            <input {...getInputProps()} />
+                            {isDragActive ? (
+                              <p>Drop the files here ...</p>
+                            ) : (
+                              <p>
+                                {emailFormData.attachment
+                                  ? emailFormData.attachment.name
+                                  : "Drag 'n' drop some files here or click to select files"}
+                              </p>
+                            )}
+                          </div>
+                        </form>
+                      </DialogContent>
+                      <DialogActions>
+                        <Button
+                          variant="outlined"
+                          onClick={() => setEmailModalOpen(false)}
+                        >
+                          Cancel
+                        </Button>
+                        <Button
+                          variant="outlined"
+                          color="primary"
+                          onClick={handleEmailFormSubmit}
+                          autoFocus
+                        >
+                          Send Email
+                        </Button>
+                      </DialogActions>
+                    </Dialog>
+                  )}
+
+                  <IconButton
+                    aria-label="download"
+                    size="large"
+                    onClick={() => handleDownloadPDF(narocilo)}
+                  >
+                    <DownloadIcon />
                   </IconButton>
-                  <IconButton aria-label="edit" size="large" onClick={() => handleEditClick(narocilo.id_narocilo)} >
+                  <IconButton
+                    aria-label="edit"
+                    size="large"
+                    onClick={() => handleEditClick(narocilo.id_narocilo)}
+                  >
                     <EditIcon />
                   </IconButton>
                   <IconButton
@@ -168,8 +378,8 @@
                     <AddIcon />
                   </IconButton>
                 </TableCell>
-                </TableRow>
-                {showHello[narocilo.id_narocilo] && (
+              </TableRow>
+              {showHello[narocilo.id_narocilo] && (
                 <TableRow>
                   <TableCell colSpan={5}>
                     <Table size="small" aria-label="product details">
@@ -185,16 +395,29 @@
                       </TableHead>
                       <TableBody>
                         {orderProducts[narocilo.id_narocilo] &&
-                          orderProducts[narocilo.id_narocilo].map((product, index) => (
-                            <TableRow key={product.id_artikel}>
-                              <TableCell>{product.id_artikel}</TableCell>
-                              <TableCell>{product.naziv}</TableCell>
-                              <TableCell>{product.dobavnaCena +" €"}</TableCell>
-                              <TableCell>{product.prodajnaCena +" €"}</TableCell>
-                              <TableCell>{narocilo.seznamKolicin[index]}</TableCell>
-                              <TableCell>{(product.prodajnaCena * narocilo.seznamKolicin[index]).toFixed(2)+" €"}</TableCell>
-                            </TableRow>
-                          ))}
+                          orderProducts[narocilo.id_narocilo].map(
+                            (product, index) => (
+                              <TableRow key={product.id_artikel}>
+                                <TableCell>{product.id_artikel}</TableCell>
+                                <TableCell>{product.naziv}</TableCell>
+                                <TableCell>
+                                  {product.dobavnaCena + " €"}
+                                </TableCell>
+                                <TableCell>
+                                  {product.prodajnaCena + " €"}
+                                </TableCell>
+                                <TableCell>
+                                  {narocilo.seznamKolicin[index]}
+                                </TableCell>
+                                <TableCell>
+                                  {(
+                                    product.prodajnaCena *
+                                    narocilo.seznamKolicin[index]
+                                  ).toFixed(2) + " €"}
+                                </TableCell>
+                              </TableRow>
+                            )
+                          )}
                       </TableBody>
                     </Table>
                   </TableCell>
